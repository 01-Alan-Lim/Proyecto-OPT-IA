{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Simula un retraso de red para las llamadas mockeadas\nconst simulateNetworkDelay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Mock data para el historial de chats\nconst mockChatHistory = [{\n  id: '1',\n  title: 'Primer chat de prueba',\n  lastMessage: 'Hola, esto es un mensaje de prueba...',\n  timestamp: new Date(Date.now() - 10000000).toISOString()\n}, {\n  id: '2',\n  title: 'Requerimientos del proyecto',\n  lastMessage: 'Los requerimientos son...',\n  timestamp: new Date(Date.now() - 5000000).toISOString()\n}];\n\n// Mock data para temas de chat\nconst mockTopics = {\n  '1': ['Desarrollo frontend', 'Arquitectura del sistema', 'Base de datos'],\n  '2': ['Requerimientos funcionales', 'Diseño UI/UX', 'Pruebas de integración']\n};\n\n// Mock data para respuestas generadas\nconst mockGeneratedDocuments = {\n  summary: \"Este es un resumen generado automáticamente sobre el tema seleccionado. La IA ha analizado el contenido del chat y ha extraído los puntos clave.\",\n  'data-table': \"| Concepto       | Valor |\\n|---------------|-------|\\n| Importancia   | Alta  |\\n| Complejidad   | Media |\\n| Tiempo estimado | 2 semanas |\",\n  sources: \"1. Documentación oficial de React\\n2. Artículo sobre mejores prácticas en Medium\\n3. Tutorial en YouTube sobre el tema\",\n  document: \"DOCUMENTO ESTRUCTURADO\\n\\nTítulo: [Tema seleccionado]\\n\\n1. Introducción\\n   - Contexto\\n   - Objetivos\\n\\n2. Desarrollo\\n   - Punto clave 1\\n   - Punto clave 2\\n\\n3. Conclusión\\n   - Resumen\\n   - Pasos siguientes\"\n};\nexport const getChatHistory = userId => {\n  // Implementación real (comentada)\n  // return axios.get(`${API_URL}/api/history`, {\n  //   headers: { 'x-user-id': userId }\n  // });\n\n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: {\n      history: mockChatHistory\n    }\n  }));\n};\nexport const sendMessage = (userId, message, chatId) => {\n  // Implementación real (comentada)\n  // return axios.post(\n  //   `${API_URL}/api/functions`,\n  //   { question: message, style: \"default\" },\n  //   {\n  //     headers: { 'x-user-id': userId },\n  //     params: { chatId }\n  //   }\n  // );\n\n  // Mock implementation\n  return simulateNetworkDelay().then(() => {\n    const newMessage = {\n      role: 'assistant',\n      content: `Respuesta mockeada para: \"${message}\"`,\n      timestamp: new Date().toISOString()\n    };\n    return {\n      data: {\n        response: newMessage.content,\n        history: [{\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString()\n        }, newMessage],\n        chatId: chatId || `mock-chat-${Date.now()}`\n      }\n    };\n  });\n};\nexport const loadChat = (userId, chatId) => {\n  // Implementación real (comentada)\n  // return axios.post(\n  //   `${API_URL}/api/functions`,\n  //   { action: \"load_chat\" },\n  //   {\n  //     headers: { 'x-user-id': userId },\n  //     params: { chatId }\n  //   }\n  // );\n\n  // Mock implementation\n  return simulateNetworkDelay().then(() => {\n    const chat = mockChatHistory.find(c => c.id === chatId) || {\n      id: chatId,\n      title: 'Chat cargado',\n      lastMessage: 'Este es un chat mockeado'\n    };\n    return {\n      data: {\n        history: [{\n          role: 'assistant',\n          content: `Este es el historial mockeado del chat ${chatId}`,\n          timestamp: new Date(Date.now() - 1000000).toISOString()\n        }, {\n          role: 'user',\n          content: 'Mensaje previo del usuario',\n          timestamp: new Date(Date.now() - 2000000).toISOString()\n        }],\n        chatId\n      }\n    };\n  });\n};\nexport const getChatTopics = chatId => {\n  // Implementación real (comentada)\n  // return axios.get(`${API_URL}/api/topics`, {\n  //   params: { chatId }\n  // });\n\n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: {\n      topics: mockTopics[chatId] || ['Tema genérico 1', 'Tema genérico 2'],\n      chatId\n    }\n  }));\n};\nexport const generateDocument = (topic, actionType) => {\n  // Implementación real (comentada)\n  // return axios.post(`${API_URL}/api/generate-document`, {\n  //   topic,\n  //   actionType\n  // });\n\n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: {\n      content: mockGeneratedDocuments[actionType] || `Contenido mockeado para ${actionType} sobre ${topic}`,\n      topic,\n      actionType,\n      timestamp: new Date().toISOString()\n    }\n  }));\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","simulateNetworkDelay","Promise","resolve","setTimeout","mockChatHistory","id","title","lastMessage","timestamp","Date","now","toISOString","mockTopics","mockGeneratedDocuments","summary","sources","document","getChatHistory","userId","then","data","history","sendMessage","message","chatId","newMessage","role","content","response","loadChat","chat","find","c","getChatTopics","topics","generateDocument","topic","actionType"],"sources":["/home/university/Escritorio/Inteligencia Artificial/Proyecto 2 - Alan Limachi/Proyecto-Agente-IA/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Simula un retraso de red para las llamadas mockeadas\nconst simulateNetworkDelay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Mock data para el historial de chats\nconst mockChatHistory = [\n  {\n    id: '1',\n    title: 'Primer chat de prueba',\n    lastMessage: 'Hola, esto es un mensaje de prueba...',\n    timestamp: new Date(Date.now() - 10000000).toISOString()\n  },\n  {\n    id: '2',\n    title: 'Requerimientos del proyecto',\n    lastMessage: 'Los requerimientos son...',\n    timestamp: new Date(Date.now() - 5000000).toISOString()\n  }\n];\n\n// Mock data para temas de chat\nconst mockTopics = {\n  '1': ['Desarrollo frontend', 'Arquitectura del sistema', 'Base de datos'],\n  '2': ['Requerimientos funcionales', 'Diseño UI/UX', 'Pruebas de integración']\n};\n\n// Mock data para respuestas generadas\nconst mockGeneratedDocuments = {\n  summary: \"Este es un resumen generado automáticamente sobre el tema seleccionado. La IA ha analizado el contenido del chat y ha extraído los puntos clave.\",\n  'data-table': \"| Concepto       | Valor |\\n|---------------|-------|\\n| Importancia   | Alta  |\\n| Complejidad   | Media |\\n| Tiempo estimado | 2 semanas |\",\n  sources: \"1. Documentación oficial de React\\n2. Artículo sobre mejores prácticas en Medium\\n3. Tutorial en YouTube sobre el tema\",\n  document: \"DOCUMENTO ESTRUCTURADO\\n\\nTítulo: [Tema seleccionado]\\n\\n1. Introducción\\n   - Contexto\\n   - Objetivos\\n\\n2. Desarrollo\\n   - Punto clave 1\\n   - Punto clave 2\\n\\n3. Conclusión\\n   - Resumen\\n   - Pasos siguientes\"\n};\n\nexport const getChatHistory = (userId) => {\n  // Implementación real (comentada)\n  // return axios.get(`${API_URL}/api/history`, {\n  //   headers: { 'x-user-id': userId }\n  // });\n  \n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: { history: mockChatHistory }\n  }));\n};\n\nexport const sendMessage = (userId, message, chatId) => {\n  // Implementación real (comentada)\n  // return axios.post(\n  //   `${API_URL}/api/functions`,\n  //   { question: message, style: \"default\" },\n  //   {\n  //     headers: { 'x-user-id': userId },\n  //     params: { chatId }\n  //   }\n  // );\n  \n  // Mock implementation\n  return simulateNetworkDelay().then(() => {\n    const newMessage = {\n      role: 'assistant',\n      content: `Respuesta mockeada para: \"${message}\"`,\n      timestamp: new Date().toISOString()\n    };\n    \n    return {\n      data: {\n        response: newMessage.content,\n        history: [{\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString()\n        }, newMessage],\n        chatId: chatId || `mock-chat-${Date.now()}`\n      }\n    };\n  });\n};\n\nexport const loadChat = (userId, chatId) => {\n  // Implementación real (comentada)\n  // return axios.post(\n  //   `${API_URL}/api/functions`,\n  //   { action: \"load_chat\" },\n  //   {\n  //     headers: { 'x-user-id': userId },\n  //     params: { chatId }\n  //   }\n  // );\n  \n  // Mock implementation\n  return simulateNetworkDelay().then(() => {\n    const chat = mockChatHistory.find(c => c.id === chatId) || {\n      id: chatId,\n      title: 'Chat cargado',\n      lastMessage: 'Este es un chat mockeado'\n    };\n    \n    return {\n      data: {\n        history: [\n          {\n            role: 'assistant',\n            content: `Este es el historial mockeado del chat ${chatId}`,\n            timestamp: new Date(Date.now() - 1000000).toISOString()\n          },\n          {\n            role: 'user',\n            content: 'Mensaje previo del usuario',\n            timestamp: new Date(Date.now() - 2000000).toISOString()\n          }\n        ],\n        chatId\n      }\n    };\n  });\n};\n\nexport const getChatTopics = (chatId) => {\n  // Implementación real (comentada)\n  // return axios.get(`${API_URL}/api/topics`, {\n  //   params: { chatId }\n  // });\n  \n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: {\n      topics: mockTopics[chatId] || ['Tema genérico 1', 'Tema genérico 2'],\n      chatId\n    }\n  }));\n};\n\nexport const generateDocument = (topic, actionType) => {\n  // Implementación real (comentada)\n  // return axios.post(`${API_URL}/api/generate-document`, {\n  //   topic,\n  //   actionType\n  // });\n  \n  // Mock implementation\n  return simulateNetworkDelay().then(() => ({\n    data: {\n      content: mockGeneratedDocuments[actionType] || `Contenido mockeado para ${actionType} sobre ${topic}`,\n      topic,\n      actionType,\n      timestamp: new Date().toISOString()\n    }\n  }));\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}